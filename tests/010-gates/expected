LOG : Parsing Complete
LOG : Type Checking Complete
LOG : Soundness Check Complete
LOG : Synth-lification Complete
LOG : Modularisation Complete
LOG : Channelisation Complete
LOG : Normalisation Complete
LOG : Initial Pass to SystemVerilog Complete
LOG : Final Pass to SystemVerilog Complete
LOG : Pretty Printing
module alpha  
(
  output logic s
);
// TO ADD
endmodule; 

module omega  
(
  input logic s
);
// TO ADD
endmodule; 

module a  
(
  output logic s
);
// TO ADD
endmodule; 

module b  
(
  output logic s
);
// TO ADD
endmodule; 

module c  
(
  output logic s
);
// TO ADD
endmodule; 

module d  
(
  output logic s
);
// TO ADD
endmodule; 

module e  
(
  input logic s
);
// TO ADD
endmodule; 

module a_  
(
  output logic s
);
// TO ADD
endmodule; 

module b_  
(
  output logic s
);
// TO ADD
endmodule; 

module c_  
(
  output logic s
);
// TO ADD
endmodule; 

module d_  
(
  output logic s
);
// TO ADD
endmodule; 

module e_  
(
  input logic s
);
// TO ADD
endmodule; 

module a__  
(
  output logic s
);
// TO ADD
endmodule; 

module b__  
(
  output logic s
);
// TO ADD
endmodule; 

module c__  
(
  output logic s
);
// TO ADD
endmodule; 

module d__  
(
  output logic s
);
// TO ADD
endmodule; 

module e__  
(
  input logic s
);
// TO ADD
endmodule; 

module Top ();
  wire logic not_in_alpha_s_omega_s;
  wire logic not_out_alpha_s_omega_s;
  wire logic and_e_s_a_s_b_s_c_s_d_s_out;
  wire logic and_e_s_a_s_b_s_c_s_d_s_in_0;
  wire logic and_e_s_a_s_b_s_c_s_d_s_in_2;
  wire logic ior_e__s_a__s_b__s_c__s_d__s_out;
  wire logic and_e_s_a_s_b_s_c_s_d_s_in_4;
  wire logic ior_e__s_a__s_b__s_c__s_d__s_in_0;
  wire logic and_e_s_a_s_b_s_c_s_d_s_in_5;
  wire logic ior_e__s_a__s_b__s_c__s_d__s_in_2;
  wire logic xor_e___s_a___s_b___s_c___s_d___s_out;
  wire logic ior_e__s_a__s_b__s_c__s_d__s_in_4;
  wire logic xor_e___s_a___s_b___s_c___s_d___s_in_0;
  wire logic ior_e__s_a__s_b__s_c__s_d__s_in_5;
  wire logic xor_e___s_a___s_b___s_c___s_d___s_in_2;
  wire logic xor_e___s_a___s_b___s_c___s_d___s_in_4;
  wire logic xor_e___s_a___s_b___s_c___s_d___s_in_5;
  alpha lightclick_module_0
     (
       .s(not_in_alpha_s_omega_s)
     );
  omega lightclick_module_1
     (
       .s(not_out_alpha_s_omega_s)
     );
  not lightclick_module_2(
    not_out_alpha_s_omega_s,
    not_in_alpha_s_omega_s
  );
  a lightclick_module_3
     (
       .s(and_e_s_a_s_b_s_c_s_d_s_in_0)
     );
  b lightclick_module_4
     (
       .s(and_e_s_a_s_b_s_c_s_d_s_in_2)
     );
  c lightclick_module_5
     (
       .s(and_e_s_a_s_b_s_c_s_d_s_in_4)
     );
  d lightclick_module_6
     (
       .s(and_e_s_a_s_b_s_c_s_d_s_in_5)
     );
  e lightclick_module_7
     (
       .s(and_e_s_a_s_b_s_c_s_d_s_out)
     );
  and lightclick_module_8(
    and_e_s_a_s_b_s_c_s_d_s_out,
    and_e_s_a_s_b_s_c_s_d_s_in_0,
    and_e_s_a_s_b_s_c_s_d_s_in_2,
    and_e_s_a_s_b_s_c_s_d_s_in_4,
    and_e_s_a_s_b_s_c_s_d_s_in_5
  );
  a_ lightclick_module_9
     (
       .s(ior_e__s_a__s_b__s_c__s_d__s_in_0)
     );
  b_ lightclick_module_10
     (
       .s(ior_e__s_a__s_b__s_c__s_d__s_in_2)
     );
  c_ lightclick_module_11
     (
       .s(ior_e__s_a__s_b__s_c__s_d__s_in_4)
     );
  d_ lightclick_module_12
     (
       .s(ior_e__s_a__s_b__s_c__s_d__s_in_5)
     );
  e_ lightclick_module_13
     (
       .s(ior_e__s_a__s_b__s_c__s_d__s_out)
     );
  ior lightclick_module_14(
    ior_e__s_a__s_b__s_c__s_d__s_out,
    ior_e__s_a__s_b__s_c__s_d__s_in_0,
    ior_e__s_a__s_b__s_c__s_d__s_in_2,
    ior_e__s_a__s_b__s_c__s_d__s_in_4,
    ior_e__s_a__s_b__s_c__s_d__s_in_5
  );
  a__ lightclick_module_15
     (
       .s(xor_e___s_a___s_b___s_c___s_d___s_in_0)
     );
  b__ lightclick_module_16
     (
       .s(xor_e___s_a___s_b___s_c___s_d___s_in_2)
     );
  c__ lightclick_module_17
     (
       .s(xor_e___s_a___s_b___s_c___s_d___s_in_4)
     );
  d__ lightclick_module_18
     (
       .s(xor_e___s_a___s_b___s_c___s_d___s_in_5)
     );
  e__ lightclick_module_19
     (
       .s(xor_e___s_a___s_b___s_c___s_d___s_out)
     );
  xor lightclick_module_20(
    xor_e___s_a___s_b___s_c___s_d___s_out,
    xor_e___s_a___s_b___s_c___s_d___s_in_0,
    xor_e___s_a___s_b___s_c___s_d___s_in_2,
    xor_e___s_a___s_b___s_c___s_d___s_in_4,
    xor_e___s_a___s_b___s_c___s_d___s_in_5
  );

endmodule;
LOG : BYE
LOG : Parsing Complete
LOG : Type Checking Complete
LOG : Soundness Check Complete
LOG : Synth-lification Complete
LOG : Modularisation Complete
LOG : Channelisation Complete
LOG : Normalisation Complete
LOG : Initial Pass to SystemVerilog Complete
LOG : Final Pass to SystemVerilog Complete
LOG : Pretty Printing
module system  
(
  output logic clk
);
// TO ADD
endmodule; 

module scrub  
(
  output logic[31:0] clean,
  input logic clk,
  input logic[31:0] dirty,
  input logic ready
);
// TO ADD
endmodule; 

module client  
(
  input logic clk,
  input logic[31:0] data_i,
  output logic[31:0] data_o,
  output logic ready
);
// TO ADD
endmodule; 

module client_d  
(
  input logic clk,
  input logic[31:0] data_i,
  output logic[31:0] data_o,
  output logic ready
);
// TO ADD
endmodule; 

module Top ();
  wire logic fan_out_from_system_clk_to_scrub_clk_client_clk_client_d_clk;
  wire logic xor_scrub_ready_client_ready_client_d_ready_out;
  wire logic xor_scrub_ready_client_ready_client_d_ready_in_0;
  wire logic xor_scrub_ready_client_ready_client_d_ready_in_1;
  wire logic[31:0] xor_scrub_dirty_client_data_o_client_d_data_o_out;
  wire logic[31:0] xor_scrub_dirty_client_data_o_client_d_data_o_in_0;
  wire logic[31:0] xor_scrub_dirty_client_data_o_client_d_data_o_in_1;
  wire logic[31:0] fan_out_from_scrub_clean_to_client_data_i_client_d_data_i;
  xor lightclick_module_0(
    xor_scrub_ready_client_ready_client_d_ready_out,
    xor_scrub_ready_client_ready_client_d_ready_in_0,
    xor_scrub_ready_client_ready_client_d_ready_in_1
  );
  xor lightclick_module_1(
    xor_scrub_dirty_client_data_o_client_d_data_o_out,
    xor_scrub_dirty_client_data_o_client_d_data_o_in_0,
    xor_scrub_dirty_client_data_o_client_d_data_o_in_1
  );
  client_d lightclick_module_2
     (
       .clk(fan_out_from_system_clk_to_scrub_clk_client_clk_client_d_clk),
       .data_i(fan_out_from_scrub_clean_to_client_data_i_client_d_data_i),
       .data_o(xor_scrub_dirty_client_data_o_client_d_data_o_in_1),
       .ready(xor_scrub_ready_client_ready_client_d_ready_in_1)
     );
  client lightclick_module_3
     (
       .clk(fan_out_from_system_clk_to_scrub_clk_client_clk_client_d_clk),
       .data_i(fan_out_from_scrub_clean_to_client_data_i_client_d_data_i),
       .data_o(xor_scrub_dirty_client_data_o_client_d_data_o_in_0),
       .ready(xor_scrub_ready_client_ready_client_d_ready_in_0)
     );
  scrub lightclick_module_4
     (
       .clean(fan_out_from_scrub_clean_to_client_data_i_client_d_data_i),
       .clk(fan_out_from_system_clk_to_scrub_clk_client_clk_client_d_clk),
       .dirty(xor_scrub_dirty_client_data_o_client_d_data_o_out),
       .ready(xor_scrub_ready_client_ready_client_d_ready_out)
     );
  system lightclick_module_5
     (
       .clk(fan_out_from_system_clk_to_scrub_clk_client_clk_client_d_clk)
     );

endmodule;
LOG : BYE
