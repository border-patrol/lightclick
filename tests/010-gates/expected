LOG: Parsing Complete 
LOG: MetaTyping Complete 
LOG: Typing Complete 
LOG : Showing ModuleIR
LOG : Normalising ChannelIR
LOG : Convert to MicroSV IR
LOG : Convert to MicroSV
LOG : Pretty Printing
module alpha  
(
  output logic s
);
// TO ADD
endmodule; 

module omega  
(
  input logic s
);
// TO ADD
endmodule; 

module a  
(
  output logic s
);
// TO ADD
endmodule; 

module b  
(
  output logic s
);
// TO ADD
endmodule; 

module c  
(
  output logic s
);
// TO ADD
endmodule; 

module d  
(
  output logic s
);
// TO ADD
endmodule; 

module e  
(
  input logic s
);
// TO ADD
endmodule; 

module a_  
(
  output logic s
);
// TO ADD
endmodule; 

module b_  
(
  output logic s
);
// TO ADD
endmodule; 

module c_  
(
  output logic s
);
// TO ADD
endmodule; 

module d_  
(
  output logic s
);
// TO ADD
endmodule; 

module e_  
(
  input logic s
);
// TO ADD
endmodule; 

module a__  
(
  output logic s
);
// TO ADD
endmodule; 

module b__  
(
  output logic s
);
// TO ADD
endmodule; 

module c__  
(
  output logic s
);
// TO ADD
endmodule; 

module d__  
(
  output logic s
);
// TO ADD
endmodule; 

module e__  
(
  input logic s
);
// TO ADD
endmodule; 

module Top ();
  wire logic not_in_alpha_s_omega_s;
  wire logic not_out_alpha_s_omega_s;
  wire logic and_e_s_a_s_b_s_c_s_d_s_out;
  wire logic and_e_s_a_s_b_s_c_s_d_s_in_0;
  wire logic and_e_s_a_s_b_s_c_s_d_s_in_2;
  wire logic ior_e__s_a__s_b__s_c__s_d__s_out;
  wire logic and_e_s_a_s_b_s_c_s_d_s_in_4;
  wire logic ior_e__s_a__s_b__s_c__s_d__s_in_0;
  wire logic and_e_s_a_s_b_s_c_s_d_s_in_5;
  wire logic ior_e__s_a__s_b__s_c__s_d__s_in_2;
  wire logic xor_e___s_a___s_b___s_c___s_d___s_out;
  wire logic ior_e__s_a__s_b__s_c__s_d__s_in_4;
  wire logic xor_e___s_a___s_b___s_c___s_d___s_in_0;
  wire logic ior_e__s_a__s_b__s_c__s_d__s_in_5;
  wire logic xor_e___s_a___s_b___s_c___s_d___s_in_2;
  wire logic xor_e___s_a___s_b___s_c___s_d___s_in_4;
  wire logic xor_e___s_a___s_b___s_c___s_d___s_in_5;
  alpha lightclick_module_0
     (
       .s(not_in_alpha_s_omega_s)
     );
  omega lightclick_module_1
     (
       .s(not_out_alpha_s_omega_s)
     );
  not lightclick_module_2(
    not_out_alpha_s_omega_s,
    not_in_alpha_s_omega_s
  );
  a lightclick_module_3
     (
       .s(and_e_s_a_s_b_s_c_s_d_s_in_0)
     );
  b lightclick_module_4
     (
       .s(and_e_s_a_s_b_s_c_s_d_s_in_2)
     );
  c lightclick_module_5
     (
       .s(and_e_s_a_s_b_s_c_s_d_s_in_4)
     );
  d lightclick_module_6
     (
       .s(and_e_s_a_s_b_s_c_s_d_s_in_5)
     );
  and lightclick_module_7(
    and_e_s_a_s_b_s_c_s_d_s_out,
    and_e_s_a_s_b_s_c_s_d_s_in_0,
    and_e_s_a_s_b_s_c_s_d_s_in_2,
    and_e_s_a_s_b_s_c_s_d_s_in_4,
    and_e_s_a_s_b_s_c_s_d_s_in_5
  );
  a_ lightclick_module_8
     (
       .s(ior_e__s_a__s_b__s_c__s_d__s_in_0)
     );
  b_ lightclick_module_9
     (
       .s(ior_e__s_a__s_b__s_c__s_d__s_in_2)
     );
  c_ lightclick_module_10
     (
       .s(ior_e__s_a__s_b__s_c__s_d__s_in_4)
     );
  d_ lightclick_module_11
     (
       .s(ior_e__s_a__s_b__s_c__s_d__s_in_5)
     );
  or lightclick_module_12(
    ior_e__s_a__s_b__s_c__s_d__s_out,
    ior_e__s_a__s_b__s_c__s_d__s_in_0,
    ior_e__s_a__s_b__s_c__s_d__s_in_2,
    ior_e__s_a__s_b__s_c__s_d__s_in_4,
    ior_e__s_a__s_b__s_c__s_d__s_in_5
  );
  a__ lightclick_module_13
     (
       .s(xor_e___s_a___s_b___s_c___s_d___s_in_0)
     );
  b__ lightclick_module_14
     (
       .s(xor_e___s_a___s_b___s_c___s_d___s_in_2)
     );
  c__ lightclick_module_15
     (
       .s(xor_e___s_a___s_b___s_c___s_d___s_in_4)
     );
  d__ lightclick_module_16
     (
       .s(xor_e___s_a___s_b___s_c___s_d___s_in_5)
     );
  xor lightclick_module_17(
    xor_e___s_a___s_b___s_c___s_d___s_out,
    xor_e___s_a___s_b___s_c___s_d___s_in_0,
    xor_e___s_a___s_b___s_c___s_d___s_in_2,
    xor_e___s_a___s_b___s_c___s_d___s_in_4,
    xor_e___s_a___s_b___s_c___s_d___s_in_5
  );

endmodule;
LOG : Bye
